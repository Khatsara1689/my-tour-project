generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  hashedPassword String
  role           String    @default("member")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  profile      Profile?
  bookings     Booking[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  inquiries    Inquiry[]
  articles Article[]
}

model Profile {
  id        String  @id @default(cuid())
  fullName  String?
  phone     String?
  avatarUrl String?

  // Relation to User (One-to-One)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique // Foreign Key
}

model Package {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  duration    Int
  price       Float
  description String   @db.Text
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings     Booking[]
  reviews      Review[]
  wishlistItems WishlistItem[]
}


// --- FEATURE MODELS ---

model Booking {
  id          String   @id @default(cuid())
  bookingDate DateTime @default(now())
  travelDate  DateTime
  status      String   // e.g., "PENDING_PAYMENT", "CONFIRMED", "COMPLETED", "CANCELLED"
  totalPrice  Float

  // Relation to User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Relation to Package
  package   Package @relation(fields: [packageId], references: [id])
  packageId String

  // Relation to Payment
  payments Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  method    String   // e.g., "CREDIT_CARD", "BANK_TRANSFER"
  status    String   // e.g., "PENDING", "COMPLETED", "FAILED"
  createdAt DateTime @default(now())

  // Relation to Booking
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String   @db.Text
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relation to User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Relation to Package
  package   Package @relation(fields: [packageId], references: [id])
  packageId String
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relation to User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Relation to Package
  package   Package @relation(fields: [packageId], references: [id])
  packageId String

  @@unique([userId, packageId]) // A user can only wishlist a package once
}

model Inquiry {
  id         String   @id @default(cuid())
  subject    String
  message    String   @db.Text
  isAnswered Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relation to User
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User (Author)
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

enum TourDestination {
  TOKYO          // โตเกียว
  OSAKA          // โอซาก้า
  HOKKAIDO       // ฮอกไกโด
  NAGOYA         // นาโกย่า
  FUKUOKA        // ฟุกุโอกะ
  SENDAI         // เซนได
  NIKKO          // นิกโก้
  HIROSHIMA      // ฮิโรชิมะ
  OKINAWA        // โอกินาว่า
  NARA           // นารา
  KOBE           // โกเบ
  KAMIKOCHI      // คามิโคจิ
  HAKUBA         // ฮาคุบะ
  SHIRAKAWAGO    // ชิราคาวาโกะ
  UNIVERSAL_STUDIOS // ยูนิเวอร์แซล
  DISNEYLAND     // ดิสนีย์แลนด์
  LEGOLAND       // เลโก้แลนด์
  SKI_RESORT     // สกีรีสอร์ท
  OTHER          // อื่นๆ
}


model TourPackage {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  destination   String
  duration      String
  price         Int
  description   String       @db.Text
  imageUrl      String?
  isPublished   Boolean      @default(false)
  
  
  category      TourDestination @default(TOKYO) 

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}